library(e1071)
data(iris)
idx <- sample(150,100)
tr <- iris[idx,]
ts <- iris[-idx,]
nb <- naiveBayes(Species ~ .,tr)
table(predict(nb,ts),ts$Species)
trST <- tr
nas <- sample(100,90)
trST[nas,'Species'] <- NA
func <- function(m,d) {
p <- predict(m,d,type='raw')
data.frame(cl=colnames(p)[apply(p,1,which.max)],p=apply(p,1,max))
}
nbSTbase <- naiveBayes(Species ~ .,trST[-nas,])
table(predict(nbSTbase,ts),ts$Species)
nbST <- SelfTrain(Species ~ .,trST,learner('naiveBayes',list()),'func')
table(predict(nbST,ts),ts$Species)
pred.nb <- function(m,d) {
p <- predict(m,d,type='raw')
data.frame(cl=colnames(p)[apply(p,1,which.max)],
p=apply(p,1,max)
)
}
nb.st <- function(train,test) {
require(e1071,quietly=T)
train <- train[,c('ID','Prod','Uprice','Insp')]
train[which(train$Insp == 'unkn'),'Insp'] <- NA
train$Insp <- factor(train$Insp,levels=c('ok','fraud'))
model <- SelfTrain(Insp ~ .,train,
learner('naiveBayes',list()),'pred.nb')
preds <- predict(model,test[,c('ID','Prod','Uprice','Insp')],
type='raw')
return(list(rankOrder=order(preds[,'fraud'],decreasing=T),
rankScore=preds[,'fraud'])
)
}
ho.nb.st <- function(form, train, test, ...) {
res <- nb.st(train,test)
structure(evalOutlierRanking(test,res$rankOrder,...),
itInfo=list(preds=res$rankScore,
trues=ifelse(test$Insp=='fraud',1,0)
)
)
}
nb.st.res <- holdOut(learner('ho.nb.st',
pars=list(Threshold=0.1,
statsProds=globalStats)),
dataset(Insp ~ .,sales),
hldSettings(3,0.3,1234,T),
itsInfo=TRUE
)
summary(nb.st.res)
par(mfrow=c(1,2))
info <- attr(nb.st.res,'itsInfo')
PTs.nb.st <- aperm(array(unlist(info),dim=c(length(info[[1]]),2,3)),
c(1,3,2)
)
PRcurve(PTs.nb[,,1],PTs.nb[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
PRcurve(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
PRcurve(PTs.nb.st[,,1],PTs.nb.st[,,2],
add=T,lty=2,
avg='vertical')
legend('topright',c('NaiveBayes','ORh','NaiveBayes-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
CRchart(PTs.nb[,,1],PTs.nb[,,2],
main='Cumulative Recall curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
CRchart(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
CRchart(PTs.nb.st[,,1],PTs.nb.st[,,2],
add=T,lty=2,
avg='vertical')
legend('bottomright',c('NaiveBayes','ORh','NaiveBayes-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
pred.ada <- function(m,d) {
p <- predict(m,d,type='probability')
data.frame(cl=colnames(p)[apply(p,1,which.max)],
p=apply(p,1,max)
)
}
ab.st <- function(train,test) {
require(RWeka,quietly=T)
train <- train[,c('ID','Prod','Uprice','Insp')]
train[which(train$Insp == 'unkn'),'Insp'] <- NA
train$Insp <- factor(train$Insp,levels=c('ok','fraud'))
model <- SelfTrain(Insp ~ .,train,
learner('AdaBoostM1',
list(control=Weka_control(I=100))),
'pred.ada')
preds <- predict(model,test[,c('ID','Prod','Uprice','Insp')],
type='probability')
return(list(rankOrder=order(preds[,'fraud'],decreasing=T),
rankScore=preds[,'fraud'])
)
}
ho.ab.st <- function(form, train, test, ...) {
res <- ab.st(train,test)
structure(evalOutlierRanking(test,res$rankOrder,...),
itInfo=list(preds=res$rankScore,
trues=ifelse(test$Insp=='fraud',1,0)
)
)
}
ab.st.res <- holdOut(learner('ho.ab.st',
pars=list(Threshold=0.1,
statsProds=globalStats)),
dataset(Insp ~ .,sales),
hldSettings(3,0.3,1234,T),
itsInfo=TRUE
)
summary(ab.st.res)
par(mfrow=c(1,2))
info <- attr(ab.st.res,'itsInfo')
PTs.ab.st <- aperm(array(unlist(info),dim=c(length(info[[1]]),2,3)),
c(1,3,2)
)
PRcurve(PTs.ab[,,1],PTs.ab[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
PRcurve(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
PRcurve(PTs.ab.st[,,1],PTs.ab.st[,,2],
add=T,lty=2,
avg='vertical')
legend('topright',c('AdaBoostM1','ORh','AdaBoostM1-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
CRchart(PTs.ab[,,1],PTs.ab[,,2],
main='Cumulative Recall curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
CRchart(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
CRchart(PTs.ab.st[,,1],PTs.ab.st[,,2],
add=T,lty=2,
avg='vertical')
legend('bottomright',c('AdaBoostM1','ORh','AdaBoostM1-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
install.packages("RWeka")
library(RWeka)
library(RWeka)
WOW(AdaBoostM1)
data(iris)
idx <- sample(150,100)
model <- AdaBoostM1(Species ~ .,iris[idx,],
control=Weka_control(I=100))
preds <- predict(model,iris[-idx,])
head(preds)
table(preds,iris[-idx,'Species'])
prob.preds <- predict(model,iris[-idx,],type='probability')
head(prob.preds)
ab <- function(train,test) {
require(RWeka,quietly=T)
sup <- which(train$Insp != 'unkn')
data <- train[sup,c('ID','Prod','Uprice','Insp')]
data$Insp <- factor(data$Insp,levels=c('ok','fraud'))
model <- AdaBoostM1(Insp ~ .,data,
control=Weka_control(I=100))
preds <- predict(model,test[,c('ID','Prod','Uprice','Insp')],
type='probability')
return(list(rankOrder=order(preds[,'fraud'],decreasing=T),
rankScore=preds[,'fraud'])
)
}
ho.ab <- function(form, train, test, ...) {
res <- ab(train,test)
structure(evalOutlierRanking(test,res$rankOrder,...),
itInfo=list(preds=res$rankScore,
trues=ifelse(test$Insp=='fraud',1,0)
)
)
}
ab.res <- holdOut(learner('ho.ab',
pars=list(Threshold=0.1,
statsProds=globalStats)),
dataset(Insp ~ .,sales),
hldSettings(3,0.3,1234,T),
itsInfo=TRUE
)
summary(ab.res)
par(mfrow=c(1,2))
info <- attr(ab.res,'itsInfo')
PTs.ab <- aperm(array(unlist(info),dim=c(length(info[[1]]),2,3)),
c(1,3,2)
)
PRcurve(PTs.nb[,,1],PTs.nb[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
PRcurve(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
PRcurve(PTs.ab[,,1],PTs.ab[,,2],
add=T,lty=2,
avg='vertical')
legend('topright',c('NaiveBayes','ORh','AdaBoostM1'),
lty=c(1,1,2),col=c('black','grey','black'))
CRchart(PTs.nb[,,1],PTs.nb[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
CRchart(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
CRchart(PTs.ab[,,1],PTs.ab[,,2],
add=T,lty=2,
avg='vertical')
legend('bottomright',c('NaiveBayes','ORh','AdaBoostM1'),
lty=c(1,1,2),col=c('black','grey','black'))
set.seed(1234) # Just to ensrure you get the same results as in the book
library(DMwR)
library(e1071)
data(iris)
idx <- sample(150,100)
tr <- iris[idx,]
ts <- iris[-idx,]
nb <- naiveBayes(Species ~ .,tr)
table(predict(nb,ts),ts$Species)
trST <- tr
nas <- sample(100,90)
trST[nas,'Species'] <- NA
func <- function(m,d) {
p <- predict(m,d,type='raw')
data.frame(cl=colnames(p)[apply(p,1,which.max)],p=apply(p,1,max))
}
nbSTbase <- naiveBayes(Species ~ .,trST[-nas,])
table(predict(nbSTbase,ts),ts$Species)
nbST <- SelfTrain(Species ~ .,trST,learner('naiveBayes',list()),'func')
table(predict(nbST,ts),ts$Species)
pred.nb <- function(m,d) {
p <- predict(m,d,type='raw')
data.frame(cl=colnames(p)[apply(p,1,which.max)],
p=apply(p,1,max)
)
}
nb.st <- function(train,test) {
require(e1071,quietly=T)
train <- train[,c('ID','Prod','Uprice','Insp')]
train[which(train$Insp == 'unkn'),'Insp'] <- NA
train$Insp <- factor(train$Insp,levels=c('ok','fraud'))
model <- SelfTrain(Insp ~ .,train,
learner('naiveBayes',list()),'pred.nb')
preds <- predict(model,test[,c('ID','Prod','Uprice','Insp')],
type='raw')
return(list(rankOrder=order(preds[,'fraud'],decreasing=T),
rankScore=preds[,'fraud'])
)
}
ho.nb.st <- function(form, train, test, ...) {
res <- nb.st(train,test)
structure(evalOutlierRanking(test,res$rankOrder,...),
itInfo=list(preds=res$rankScore,
trues=ifelse(test$Insp=='fraud',1,0)
)
)
}
nb.st.res <- holdOut(learner('ho.nb.st',
pars=list(Threshold=0.1,
statsProds=globalStats)),
dataset(Insp ~ .,sales),
hldSettings(3,0.3,1234,T),
itsInfo=TRUE
)
summary(nb.st.res)
par(mfrow=c(1,2))
info <- attr(nb.st.res,'itsInfo')
PTs.nb.st <- aperm(array(unlist(info),dim=c(length(info[[1]]),2,3)),
c(1,3,2)
)
PRcurve(PTs.nb[,,1],PTs.nb[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
PRcurve(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
PRcurve(PTs.nb.st[,,1],PTs.nb.st[,,2],
add=T,lty=2,
avg='vertical')
legend('topright',c('NaiveBayes','ORh','NaiveBayes-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
CRchart(PTs.nb[,,1],PTs.nb[,,2],
main='Cumulative Recall curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
CRchart(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
CRchart(PTs.nb.st[,,1],PTs.nb.st[,,2],
add=T,lty=2,
avg='vertical')
legend('bottomright',c('NaiveBayes','ORh','NaiveBayes-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
pred.ada <- function(m,d) {
p <- predict(m,d,type='probability')
data.frame(cl=colnames(p)[apply(p,1,which.max)],
p=apply(p,1,max)
)
}
ab.st <- function(train,test) {
require(RWeka,quietly=T)
train <- train[,c('ID','Prod','Uprice','Insp')]
train[which(train$Insp == 'unkn'),'Insp'] <- NA
train$Insp <- factor(train$Insp,levels=c('ok','fraud'))
model <- SelfTrain(Insp ~ .,train,
learner('AdaBoostM1',
list(control=Weka_control(I=100))),
'pred.ada')
preds <- predict(model,test[,c('ID','Prod','Uprice','Insp')],
type='probability')
return(list(rankOrder=order(preds[,'fraud'],decreasing=T),
rankScore=preds[,'fraud'])
)
}
ho.ab.st <- function(form, train, test, ...) {
res <- ab.st(train,test)
structure(evalOutlierRanking(test,res$rankOrder,...),
itInfo=list(preds=res$rankScore,
trues=ifelse(test$Insp=='fraud',1,0)
)
)
}
ab.st.res <- holdOut(learner('ho.ab.st',
pars=list(Threshold=0.1,
statsProds=globalStats)),
dataset(Insp ~ .,sales),
hldSettings(3,0.3,1234,T),
itsInfo=TRUE
)
summary(ab.st.res)
par(mfrow=c(1,2))
info <- attr(ab.st.res,'itsInfo')
PTs.ab.st <- aperm(array(unlist(info),dim=c(length(info[[1]]),2,3)),
c(1,3,2)
)
PRcurve(PTs.ab[,,1],PTs.ab[,,2],
main='PR curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
PRcurve(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
PRcurve(PTs.ab.st[,,1],PTs.ab.st[,,2],
add=T,lty=2,
avg='vertical')
legend('topright',c('AdaBoostM1','ORh','AdaBoostM1-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
CRchart(PTs.ab[,,1],PTs.ab[,,2],
main='Cumulative Recall curve',lty=1,xlim=c(0,1),ylim=c(0,1),
avg='vertical')
CRchart(PTs.orh[,,1],PTs.orh[,,2],
add=T,lty=1,col='grey',
avg='vertical')
CRchart(PTs.ab.st[,,1],PTs.ab.st[,,2],
add=T,lty=2,
avg='vertical')
legend('bottomright',c('AdaBoostM1','ORh','AdaBoostM1-ST'),
lty=c(1,1,2),col=c('black','grey','black'))
devtools::install_github('jtrecenti/jurimetria')
install.packages("devtools")
devtools::install_github('jtrecenti/jurimetria')
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("glue")
if (!require(devtools)) install.packages('devtools')
devtools::install_github('abjur/prodTJSP')
if (!require(devtools)) install.packages('devtools')
devtools::install_github('abjur/prodTJSP')
library("prodTJSP")
install.packages("glue")
install.packages("dplyr")
library("dplyr")
devtools::install_github('jtrecenti/jurimetria')
devtools::install_github('jtrecenti/jurimetria')
devtools::install_github('jtrecenti/jurimetria', force="TRUE")
devtools::install_github('jtrecenti/jurimetria')
library("jurimetria")
library(plyr);
library(dplyr)
library("jurimetria")
library(spgtfs)
devtools::install_github('jtrecenti/spgtfs') # dados GTFS
library(spgtfs)
library(sptrans)
devtools::install_github('jtrecenti/sptrans') # funcoes e API
library(stringr)
library(httr)
library(rvest)
library(dplyr)
# Baixa um processo de uma pagina
baixa_processo_pagina <- function(ctl, r, link, pag, viewstate, eventval) {
nome_pdf <- r %>% content('text') %>% html %>%
html_node(sprintf('#ctl00_ConteudoPagina_gdvEntidade_%s_lnkArquivo', ctl)) %>% html_text
dados <- list('__VIEWSTATE'=viewstate,
'__EVENTVALIDATION'=eventval,
'__EVENTTARGET'=sprintf('ctl00$ConteudoPagina$gdvEntidade$%s$lnkArquivo', ctl),
'__EVENTARGUMENT'='',
'ctl00$ConteudoPagina$txbFiltroDataInicial'='',
'ctl00$ConteudoPagina$txbFiltroDataFinal'='',
'ctl00$ConteudoPagina$ddlFiltroRecurso'='10',
'ctl00$ConteudoPagina$txbFiltroAiim'='',
'ctl00$ConteudoPagina$ddlFiltroDrt'='0',
'ctl00$ConteudoPagina$txbFiltroProcesso'='',
'ctl00$ConteudoPagina$txbFiltroAnoProcesso'='',
'ctl00$ConteudoPagina$txbFiltroEmenta'='')
try({
pdf <- POST(link, body=dados, cookies=unlist(r$cookies))
writeBin(content(pdf, 'raw'), sprintf('pdf/%04d_%s', pag, nome_pdf))
return(TRUE)
})
return(FALSE)
}
# Baixa todos os processos de uma pagina e retorna um data frame indicando
# quais arquivos foram baixados e se baixou com sucesso
baixa_processos_pagina <- function(r, link, pag) {
viewstate <- r %>% content('text') %>% html %>% html_node('#__VIEWSTATE') %>% html_attr('value')
eventval <- r %>% content('text') %>% html %>% html_node('#__EVENTVALIDATION') %>% html_attr('value')
ctl <- r %>%
content('text') %>%
html %>%
html_nodes(xpath="//a[@id!='']") %>%
html_attr('id') %>%
str_match('_(ctl[0-9]+)_') %>%
data.frame %>%
with(X2) %>%
as.character
nomes_pdf <- r %>% content('text') %>% html %>% html_nodes(xpath="//a[@id!='']") %>% html_text
result <- sapply(ctl, baixa_processo_pagina, r, link, pag, viewstate, eventval)
return(data_frame(ctl, nomes_pdf, result))
}
# Acessa a proxima pagina e retorna NULL se der errado
acessa_pagina <- function(r, link, pag) {
cat(content(r, 'text'), file=sprintf('html/%04d.html', pag-1))
viewstate <- r %>% content('text') %>% html %>% html_node('#__VIEWSTATE') %>% html_attr('value')
eventval <- r %>% content('text') %>% html %>% html_node('#__EVENTVALIDATION') %>% html_attr('value')
dados <- list('__VIEWSTATE'=viewstate,
'__EVENTVALIDATION'=eventval,
'__EVENTTARGET'='ctl00$ConteudoPagina$gdvEntidade',
'__EVENTARGUMENT'=sprintf('Page$%d', pag),
'ctl00$ConteudoPagina$txbFiltroDataInicial'='',
'ctl00$ConteudoPagina$txbFiltroDataFinal'='',
'ctl00$ConteudoPagina$ddlFiltroRecurso'='10',
'ctl00$ConteudoPagina$txbFiltroAiim'='',
'ctl00$ConteudoPagina$ddlFiltroDrt'='0',
'ctl00$ConteudoPagina$txbFiltroProcesso'='',
'ctl00$ConteudoPagina$txbFiltroAnoProcesso'='',
'ctl00$ConteudoPagina$txbFiltroEmenta'='')
try({
resp <- POST(link, body=dados, cookies=unlist(r$cookies))
return(resp)
})
}
# Funcao principal!
baixa_sefaz_sp <- function(limite=10) {
link <- 'https://www.fazenda.sp.gov.br/VDTIT/ConsultarVotos.aspx?instancia=1'
txt <- GET(link)
viewstate <- txt %>% content('text') %>% html %>% html_node('#__VIEWSTATE') %>% html_attr('value')
eventval <- txt %>% content('text') %>% html %>% html_node('#__EVENTVALIDATION') %>% html_attr('value')
dados <- list('__VIEWSTATE'=viewstate,
'__EVENTVALIDATION'=eventval,
'__EVENTTARGET'='',
'__EVENTARGUMENT'='',
'ctl00$ConteudoPagina$txbFiltroDataInicial'='',
'ctl00$ConteudoPagina$txbFiltroDataFinal'='',
'ctl00$ConteudoPagina$ddlFiltroRecurso'='10',
'ctl00$ConteudoPagina$txbFiltroAiim'='',
'ctl00$ConteudoPagina$ddlFiltroDrt'='0',
'ctl00$ConteudoPagina$txbFiltroProcesso'='',
'ctl00$ConteudoPagina$txbFiltroAnoProcesso'='',
'ctl00$ConteudoPagina$txbFiltroEmenta'='',
'ctl00$ConteudoPagina$btnConsultar'='Consultar')
r <- POST(link, body=dados, cookies=unlist(txt$cookies))
continua <- TRUE
pag <- 1
res <- data_frame(ctl=character(0), nomes_pdf=character(0), result=character(0))
while(continua & pag <= limite) {
res <- rbind(res, baixa_processos_pagina(r, link, pag))
pag <- pag + 1
r <- acessa_pagina(r, link, pag)
continua <- !is.null(r)
}
res
}
# Como usar
resultados <- baixa_sefaz_sp(limite=5)
install.packages("glue")
install.packages("glue")
library(glue);
library(plyr);
library(dplyr)
library("jurimetria")
library(spgtfs)
library(sptrans)
library(jurimetria)
man(jurimetria)
jurimetria?
help(jurimetria)
bug
crawler_prod_ja(cod_prod, cod_vara, tipo = "vara", d_pdf, d_html,
pdf2txt = TRUE)
if (!require(devtools)) install.packages('devtools')
devtools::install_github('abjur/prodTJSP')
library("prodTJSP")
d_list <- prod_download_courts()
d_list <- prod_list()
prod_download(d_list, path = 'data-raw/pdf')
head(d_list)
arqs <- dir('data-raw/pdf', full.names = TRUE)
d_prod <- prod_parse_uni(arqs)
d_prod
